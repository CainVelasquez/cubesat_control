function plotall(fe, vectTemps, vectX, vecjour, vectmoment) % NE PAS RECALCULER
global frot gradient
global Cd
global Torbite
global boolplot
global freq
pas=1/freq;


plotbiais=boolplot(1);
plotquat=boolplot(2);
plotomega=boolplot(3);
plottheta=boolplot(4);
plotforces=boolplot(5);
plotenergie=boolplot(6);
plotmoment=boolplot(7);
plotlyapu=boolplot(8);

n=size(vectX,2)-1;
vectdiffb=[vectX(8,:)-vectX(15,:);...
    vectX(9,:)-vectX(16,:);...
    vectX(10,:)-vectX(17,:)];
vectb=vectX(8:10,:);
vectbo=vectX(15:17,:);


%Convergence pour le quaternion (pas sûr de l'ordre, quel inverse faut-il prendre?)
vectqknow=zeros(4,n);
vectqacc=zeros(4,n);
for i=1:n+1
%     vectqknow(:,i)=quatprod(vectX(1:4,i)',invQ(vectX(11:14,i)'));
%     vectqacc(:,i)=quatprod(vectX(1:4,i)',invQ(vectX(18:21,i)'));
    vectqknow(:,i)=quatprod(invQ(vectX(11:14,i)'),vectX(1:4,i)');
    vectqacc(:,i)=quatprod(invQ(vectX(18:21,i)'),vectX(1:4,i)');
end;

%Erreur angulaire
theta=zeros(1,n+1);
thetaref=zeros(1,n+1);
for i=1:n+1
%     theta(i)=norm(2*asin(norm(vectq(1:3,i)))*180/pi);
    theta(i)=norm(acos( QrotInv(vectqknow(:,i),[1;0;0])'*[1;0;0] )*180/pi);
    thetaref(i)=norm(acos( QrotInv(vectqacc(:,i),[1;0;0])'*[1;0;0] )*180/pi);
%     thetaref(i)=norm(2*asin(norm(vectqref(1:3,i)))*180/pi);
end
vectomega=(vectX(5:7,:));
vectomegao=(vectX(31:33,:));

%===Tracé des courbes===

if(plotbiais==1)
    fplotbiais(vectTemps, vectb, vectbo);
end


if(plotquat==1)
    fplotquat(vectTemps, vectqknow, vectqacc);
end


if(plotomega==1)
    fplotomega(vectTemps, vectomega, vectomegao, vectdiffb)
end

if(plottheta==1)
    fplottheta(vectTemps, vecjour, theta, thetaref)
end



% vectmoment=vectX(25:27,:);
if(plotmoment==1)
    % Torque
    figure('color', 'white');
    plot(vectTemps, vectmoment, 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Torque $[A.m^2]$', 'interpreter', 'latex', 'fontsize',13);
    legend('X', 'Y', 'Z');
    grid
    title('Torque generated by the coils', 'interpreter', 'latex', 'fontsize',13);
end

%Calcul de l'intensité/puissance parcourant les bobines
%il faudrait faire une fonction spécifique quand les données seront sues
surfacex=(75e-3)^2; surfacey=surfacex; surfacez=surfacex;
Nx=1500; Ny=Nx; Nz=Nx;
vectintensite=[vectmoment(1,:)/(surfacex*Nx); vectmoment(2,:)/(surfacey*Ny); vectmoment(3,:)/(surfacez*Nz)];

%calcul de la consommation 
resistance=60;
vectpuissance=zeros(1,length(vectintensite));
vectenergie=vectpuissance;
for compt=1:length(vectintensite)
    vectpuissance(compt)=resistance*(vectintensite(1,compt)^2+vectintensite(2,compt)^2+vectintensite(3,compt)^2);
    if(compt>1)
        vectenergie(compt)=vectpuissance(compt)*pas+vectenergie(compt-1);
    end
    
end


if(plotenergie==1)
    figure('color', 'white');
    
    subplot(211)
    plot(vectTemps, vectpuissance, 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Power [Watt]');
%     legend('X', 'Y', 'Z');
    grid
    title('Power consumption');
    
    subplot(212)
    plot(vectTemps, vectenergie, 'linewidth', 2);%vectenergie/(3600*7.2) pour les A.h
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Energy [J]');
    grid
    title('Power consumption');
end



%Recalcul du moment aero
%Ce calcul est fait une seconde fois pour ne pas avoir une autre variable
%globale...
n1 = [1;0;0];
n2 = [0;1;0];
n3 = [0;0;1];

surf1=.1*.1; surf2=.1*.2; surf3=surf2;
central=[-1e-2, 0, 0];
vectmomaero=zeros(3,length(vectTemps));
vectmomgrad=vectmomaero;
% disp(size(vectmomaero));
% disp(size(vectTemps));
om0 = sqrt(6.67e-11*5.97e24/((6370e3+250e3)^(3)));
I=getInertie();
v=7.8e3;

%B et S
vectB=zeros(3,length(vectTemps));
vectS=zeros(3,length(vectTemps));
vectBo=zeros(3,length(vectTemps));
vectSo=zeros(3,length(vectTemps));

for j=1:length(vectTemps)
    
    uv = QrotInv(vectqacc(:,j)',[1 0 0]); %expression de la vitesse dans le repère satellite
    uv = uv/norm(uv);
    Kfrot1=0.5*Cd*airdensity(vectTemps(j)*Torbite)*v^2*surf1*dot(uv,n1)*cross3(uv, central);
    Kfrot2=0.5*Cd*airdensity(vectTemps(j)*Torbite)*v^2*surf2*dot(uv,n2)*cross3(uv, central);
    Kfrot3=0.5*Cd*airdensity(vectTemps(j)*Torbite)*v^2*surf3*dot(uv,n3)*cross3(uv, central);
    Kfrot = Kfrot1+Kfrot2+Kfrot3;
    vectmomaero(:,j)=Kfrot';
    qorbsat=vectqacc(:,j);
    zrot = [(2*(-qorbsat(4)*qorbsat(2)+qorbsat(1)*qorbsat(3)));(2*(qorbsat(2)*qorbsat(3)+qorbsat(4)*qorbsat(1)));(1-2*qorbsat(1)^2-2*qorbsat(2)^2)];

    vectmomgrad(:,j) = 3*om0^2*cross3(zrot,I*zrot)';
    
    vectB(:,j)=QrotInv(vectX(1:4,j)',Bgctime(j*5400/fe))/norm(Bgctime(j*5400/fe));
    vectS(:,j)=QrotInv(vectX(1:4,j)',Sgctime(j*5400/fe));
    vectSo(:,j)=vectX(25:27,j);
    vectBo(:,j)=vectX(28:30,j);
end

figure('color', 'white');

subplot(211);
plot(vectTemps, vectB, vectTemps, vectBo, '--', 'linewidth', 2);
xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
ylabel('B ', 'interpreter', 'latex', 'fontsize',13);
legend('BX', 'BY', 'BZ', 'BXo', 'BYo', 'BZo');
grid
title('Magnetic field', 'interpreter', 'latex', 'fontsize',13);

subplot(212);
plot(vectTemps, vectS, vectTemps, vectSo,'--', 'linewidth', 2);
xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
ylabel('S', 'interpreter', 'latex', 'fontsize',13);
legend('SX', 'SY', 'Sz', 'Sxo', 'Syo', 'Szo');
grid
title('S', 'interpreter', 'latex', 'fontsize',13);



if (plotforces==1)
    figure('color', 'white');
    
    subplot(221);
    plot(vectTemps, vectmomaero*frot, 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Torque $[N.m]$', 'interpreter', 'latex', 'fontsize',13);
    legend('aeroX', 'aeroY', 'aeroZ');
    grid
    title('Aerodynamical disturbance torque', 'interpreter', 'latex', 'fontsize',13);
    
    subplot(222);
    plot(vectTemps, log10(airdensity(vectTemps*Torbite)), 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Air density (log) $[kg.m^{-3}]$', 'interpreter', 'latex', 'fontsize',13);
    grid
    title('Air density', 'interpreter', 'latex', 'fontsize',13);
    
    
    subplot(223);
    plot(vectTemps, vectmomgrad*gradient, 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel(' Torque $[N.m]$', 'interpreter', 'latex', 'fontsize',13);
    legend('gradX', 'gradY', 'gradZ');
    grid
    title('Gradient gravity disturbance torque', 'interpreter', 'latex', 'fontsize',13);
    
    subplot(224);
    plot(vectTemps, vectmoment, 'linewidth', 2);
    xlabel('Time $[T_0]$', 'interpreter', 'latex', 'fontsize',13);
    ylabel('Torque $[A.m^2]$', 'interpreter', 'latex', 'fontsize',13);
    legend('X', 'Y', 'Z');
    grid
    title('Torque generated by the coils', 'interpreter', 'latex', 'fontsize',13);
end


if(plotlyapu==1)
    tracerlyapu(vectqacc, vectomega);
end
    fprintf('==============================================\n');
% end

end